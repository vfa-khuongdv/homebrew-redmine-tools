name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'

    - name: Get the version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binaries
      run: |
        make release VERSION=${{ steps.get_version.outputs.VERSION }}
        make archives VERSION=${{ steps.get_version.outputs.VERSION }}
        
        # Generate checksums
        cd build
        sha256sum *.tar.gz *.zip > checksums.txt
        cat checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: build/*.tar.gz,build/*.zip,build/checksums.txt
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Homebrew formula
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configure git with token for authentication
        git config --global url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
        
        # Clone the homebrew tap repo
        git clone https://github.com/vfa-khuongdv/homebrew-redmine-tools.git homebrew-tap
        cd homebrew-tap
        
        # Set up git user for commits
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Create formula update script
        cat > update_formula.sh << 'EOF'
        #!/bin/bash
        REPO="vfa-khuongdv/homebrew-redmine-tools"
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        
        # Download all release assets to get SHA256 checksums
        gh release download ${VERSION} --repo ${REPO} --pattern "*.tar.gz" --pattern "checksums.txt"
        
        # Extract SHA256 values from checksums file
        DARWIN_ARM64_SHA256=$(grep "redmine-tools-darwin-arm64.tar.gz" checksums.txt | cut -d ' ' -f 1)
        DARWIN_AMD64_SHA256=$(grep "redmine-tools-darwin-amd64.tar.gz" checksums.txt | cut -d ' ' -f 1)
        LINUX_ARM64_SHA256=$(grep "redmine-tools-linux-arm64.tar.gz" checksums.txt | cut -d ' ' -f 1)
        LINUX_AMD64_SHA256=$(grep "redmine-tools-linux-amd64.tar.gz" checksums.txt | cut -d ' ' -f 1)
        
        # Update the formula
        cat > redmine-tools.rb << EOL
        class RedmineTools < Formula
          desc "Command-line tool for working with Redmine projects"
          homepage "https://github.com/vfa-khuongdv/homebrew-redmine-tools"
          version "${VERSION#v}"
          license "MIT"
        
          on_macos do
            if Hardware::CPU.arm?
              url "https://github.com/vfa-khuongdv/homebrew-redmine-tools/releases/download/${VERSION}/redmine-tools-darwin-arm64.tar.gz"
              sha256 "${DARWIN_ARM64_SHA256}"
            end
            if Hardware::CPU.intel?
              url "https://github.com/vfa-khuongdv/homebrew-redmine-tools/releases/download/${VERSION}/redmine-tools-darwin-amd64.tar.gz"
              sha256 "${DARWIN_AMD64_SHA256}"
            end
          end
        
          on_linux do
            if Hardware::CPU.arm? && Hardware::CPU.arch_64_bit?
              url "https://github.com/vfa-khuongdv/homebrew-redmine-tools/releases/download/${VERSION}/redmine-tools-linux-arm64.tar.gz"
              sha256 "${LINUX_ARM64_SHA256}"
            end
            if Hardware::CPU.intel?
              url "https://github.com/vfa-khuongdv/homebrew-redmine-tools/releases/download/${VERSION}/redmine-tools-linux-amd64.tar.gz"
              sha256 "${LINUX_AMD64_SHA256}"
            end
          end
        
          def install
            bin.install Dir["redmine-tools-*"].first => "redmine-tools"
          end
        
          test do
            output = shell_output("#{bin}/redmine-tools --version")
            assert_match "redmine-tools version #{version}", output
          end
        end
        EOL
        
        # Commit and push
        git add redmine-tools.rb
        git commit -m "Update redmine-tools to ${VERSION}"
        git push
        EOF
        
        chmod +x update_formula.sh
        ./update_formula.sh
        echo "Formula updated successfully"
